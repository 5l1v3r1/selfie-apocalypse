(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var renderer, scene, camera, cube, mesh, videoTexture;

var video = document.getElementById('localVideo');

var webrtc = new SimpleWebRTC({
	localVideoEl: 'localVideo',
	remoteVideosEl: 'remoteVideo',
	autoRequestMedia: true
});

webrtc.on('readyToCall', function () {
	webrtc.joinRoom('My room name');
	console.log("joined room!");
	initWebGL();
});

function initWebGL(){
	renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				//

				camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.z = 400;

				scene = new THREE.Scene();
				var geometry = new THREE.PlaneGeometry( window.innerWidth, window.innerHeight);
				//var geometry = new THREE.BoxGeometry( 200, 200, 200 );

				var texture = THREE.ImageUtils.loadTexture( 'textures/crate.gif' );
				texture.anisotropy = renderer.getMaxAnisotropy();
				videoTexture = new THREE.Texture( video );
				
				videoTexture.minFilter = THREE.LinearFilter;
				videoTexture.magFilter = THREE.LinearFilter;
				videoTexture.format = THREE.RGBFormat;

				var material = new THREE.MeshBasicMaterial( { map: videoTexture} );

				mesh = new THREE.Mesh( geometry, material );
				scene.add( mesh );
				render();
				//
}
	/*renderer = new THREE.WebGLRenderer();
	//renderer.setPixelRatio( window.devicePixelRatio );
	renderer.setSize( window.innerWidth, window.innerHeight );
	document.getElementById('container').appendChild(renderer.domElement);

	scene = new THREE.Scene();


	var geometry = new THREE.PlaneGeometry( 5, 20, 32 );
	//var material = new THREE.MeshBasicMaterial( {color: 0xffff00, side: THREE.DoubleSide} );
	videoTexture = new THREE.Texture( video );
	var material   = new THREE.MeshLambertMaterial({
		color: 0xff00ff,
		side: THREE.DoubleSide
 		// map : videoTexture
	});
	var plane = new THREE.Mesh( geometry, material );
	scene.add( plane );
/*	var geometry = new THREE.BoxGeometry( 1, 1, 1 );
//var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
		videoTexture = new THREE.Texture( video );
	var material   = new THREE.MeshBasicMaterial({
 		 map : videoTexture
	});
cube = new THREE.Mesh( geometry, material );
scene.add( cube );
camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
camera.position.z = 5;
scene.add(camera);
render();
}*/

function render() {
	requestAnimationFrame( render );
	if( video.readyState === video.HAVE_ENOUGH_DATA ){
  //videoTexture.needsUpdate = true;
}
videoTexture.needsUpdate = true;
	//cube.rotation.x += 0.1;
//cube.rotation.y += 0.1;
//mesh.rotation.x += 0.005;
				//mesh.rotation.y += 0.01;
	renderer.render( scene, camera );
}



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvb2phY2svY29kZS9WSURFT19NSVhFUi9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsSUFBSSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQzs7QUFFdEQsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQzs7QUFFbEQsSUFBSSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUM7Q0FDN0IsWUFBWSxFQUFFLFlBQVk7Q0FDMUIsY0FBYyxFQUFFLGFBQWE7Q0FDN0IsZ0JBQWdCLEVBQUUsSUFBSTtBQUN2QixDQUFDLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUM7Q0FDckMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztDQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQzVCLFNBQVMsRUFBRSxDQUFDO0FBQ2IsQ0FBQyxDQUFDLENBQUM7O0FBRUgsU0FBUyxTQUFTLEVBQUUsQ0FBQztDQUNwQixRQUFRLEdBQUcsSUFBSSxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDbEMsUUFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNsRCxRQUFRLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzlELElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3JEO0FBQ0E7O0lBRUksTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ2hHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDOztJQUV4QixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDOUIsSUFBSSxJQUFJLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbkY7O0lBRUksSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQztJQUNuRSxPQUFPLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0FBQ3JELElBQUksWUFBWSxHQUFHLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQzs7SUFFMUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO0lBQzVDLFlBQVksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztBQUNoRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7QUFFMUMsSUFBSSxJQUFJLFFBQVEsR0FBRyxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLEdBQUcsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDOztJQUVuRSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUM1QyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ3RCLElBQUksTUFBTSxFQUFFLENBQUM7O0NBRVo7QUFDRCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRzs7QUFFSCxTQUFTLE1BQU0sR0FBRyxDQUFDO0NBQ2xCLHFCQUFxQixFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQ2pDLENBQUMsSUFBSSxLQUFLLENBQUMsVUFBVSxLQUFLLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTs7Q0FFakQ7QUFDRCxZQUFZLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztBQUNoQztBQUNBO0FBQ0E7O0NBRUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDbEMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGN1YmUsIG1lc2gsIHZpZGVvVGV4dHVyZTtcblxudmFyIHZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvY2FsVmlkZW8nKTtcblxudmFyIHdlYnJ0YyA9IG5ldyBTaW1wbGVXZWJSVEMoe1xuXHRsb2NhbFZpZGVvRWw6ICdsb2NhbFZpZGVvJyxcblx0cmVtb3RlVmlkZW9zRWw6ICdyZW1vdGVWaWRlbycsXG5cdGF1dG9SZXF1ZXN0TWVkaWE6IHRydWVcbn0pO1xuXG53ZWJydGMub24oJ3JlYWR5VG9DYWxsJywgZnVuY3Rpb24gKCkge1xuXHR3ZWJydGMuam9pblJvb20oJ015IHJvb20gbmFtZScpO1xuXHRjb25zb2xlLmxvZyhcImpvaW5lZCByb29tIVwiKTtcblx0aW5pdFdlYkdMKCk7XG59KTtcblxuZnVuY3Rpb24gaW5pdFdlYkdMKCl7XG5cdHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcblx0XHRcdFx0cmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyggd2luZG93LmRldmljZVBpeGVsUmF0aW8gKTtcblx0XHRcdFx0cmVuZGVyZXIuc2V0U2l6ZSggd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCApO1xuXHRcdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCByZW5kZXJlci5kb21FbGVtZW50ICk7XG5cblx0XHRcdFx0Ly9cblxuXHRcdFx0XHRjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoIDcwLCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMSwgMTAwMCApO1xuXHRcdFx0XHRjYW1lcmEucG9zaXRpb24ueiA9IDQwMDtcblxuXHRcdFx0XHRzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuXHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSggd2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG5cdFx0XHRcdC8vdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KCAyMDAsIDIwMCwgMjAwICk7XG5cblx0XHRcdFx0dmFyIHRleHR1cmUgPSBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCAndGV4dHVyZXMvY3JhdGUuZ2lmJyApO1xuXHRcdFx0XHR0ZXh0dXJlLmFuaXNvdHJvcHkgPSByZW5kZXJlci5nZXRNYXhBbmlzb3Ryb3B5KCk7XG5cdFx0XHRcdHZpZGVvVGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlKCB2aWRlbyApO1xuXHRcdFx0XHRcblx0XHRcdFx0dmlkZW9UZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcblx0XHRcdFx0dmlkZW9UZXh0dXJlLm1hZ0ZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcblx0XHRcdFx0dmlkZW9UZXh0dXJlLmZvcm1hdCA9IFRIUkVFLlJHQkZvcm1hdDtcblxuXHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgbWFwOiB2aWRlb1RleHR1cmV9ICk7XG5cblx0XHRcdFx0bWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0XHRcdFx0c2NlbmUuYWRkKCBtZXNoICk7XG5cdFx0XHRcdHJlbmRlcigpO1xuXHRcdFx0XHQvL1xufVxuXHQvKnJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcblx0Ly9yZW5kZXJlci5zZXRQaXhlbFJhdGlvKCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyApO1xuXHRyZW5kZXJlci5zZXRTaXplKCB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0ICk7XG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250YWluZXInKS5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcblxuXHRzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuXG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoIDUsIDIwLCAzMiApO1xuXHQvL3ZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgge2NvbG9yOiAweGZmZmYwMCwgc2lkZTogVEhSRUUuRG91YmxlU2lkZX0gKTtcblx0dmlkZW9UZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoIHZpZGVvICk7XG5cdHZhciBtYXRlcmlhbCAgID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe1xuXHRcdGNvbG9yOiAweGZmMDBmZixcblx0XHRzaWRlOiBUSFJFRS5Eb3VibGVTaWRlXG4gXHRcdC8vIG1hcCA6IHZpZGVvVGV4dHVyZVxuXHR9KTtcblx0dmFyIHBsYW5lID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHRzY2VuZS5hZGQoIHBsYW5lICk7XG4vKlx0dmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KCAxLCAxLCAxICk7XG4vL3ZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHgwMGZmMDAgfSApO1xuXHRcdHZpZGVvVGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlKCB2aWRlbyApO1xuXHR2YXIgbWF0ZXJpYWwgICA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG4gXHRcdCBtYXAgOiB2aWRlb1RleHR1cmVcblx0fSk7XG5jdWJlID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuc2NlbmUuYWRkKCBjdWJlICk7XG5jYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoIDc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4xLCAxMDAwICk7XG5jYW1lcmEucG9zaXRpb24ueiA9IDU7XG5zY2VuZS5hZGQoY2FtZXJhKTtcbnJlbmRlcigpO1xufSovXG5cbmZ1bmN0aW9uIHJlbmRlcigpIHtcblx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKCByZW5kZXIgKTtcblx0aWYoIHZpZGVvLnJlYWR5U3RhdGUgPT09IHZpZGVvLkhBVkVfRU5PVUdIX0RBVEEgKXtcbiAgLy92aWRlb1RleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xufVxudmlkZW9UZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0Ly9jdWJlLnJvdGF0aW9uLnggKz0gMC4xO1xuLy9jdWJlLnJvdGF0aW9uLnkgKz0gMC4xO1xuLy9tZXNoLnJvdGF0aW9uLnggKz0gMC4wMDU7XG5cdFx0XHRcdC8vbWVzaC5yb3RhdGlvbi55ICs9IDAuMDE7XG5cdHJlbmRlcmVyLnJlbmRlciggc2NlbmUsIGNhbWVyYSApO1xufVxuXG4iXX0=
